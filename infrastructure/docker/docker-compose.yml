version: '3.8'

services:
  # ==================== Data Layer ====================
  postgres-auth:
    image: postgres:15-alpine
    container_name: democratic_ai_postgres_auth
    environment:
      POSTGRES_DB: democratic_ai_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-usage:
    image: postgres:15-alpine
    container_name: democratic_ai_postgres_usage
    environment:
      POSTGRES_DB: democratic_ai_usage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5433:5432"
    volumes:
      - postgres_usage_data:/var/lib/postgresql/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-billing:
    image: postgres:15-alpine
    container_name: democratic_ai_postgres_billing
    environment:
      POSTGRES_DB: democratic_ai_billing
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5435:5432"
    volumes:
      - postgres_billing_data:/var/lib/postgresql/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-registry:
    image: postgres:15-alpine
    container_name: democratic_ai_postgres_registry
    environment:
      POSTGRES_DB: democratic_ai_registry
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5434:5432"
    volumes:
      - postgres_registry_data:/var/lib/postgresql/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== Cache Layer ====================
  redis:
    image: redis:7-alpine
    container_name: democratic_ai_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cluster:
    image: redis:7-alpine
    container_name: democratic_ai_redis_cluster
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "7000:6379"
    volumes:
      - redis_cluster_data:/data
    networks:
      - democratic_ai_network

  # ==================== Search & Analytics ====================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: democratic_ai_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: democratic_ai_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - democratic_ai_network
    depends_on:
      - elasticsearch

  # ==================== Time Series Database ====================
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: democratic_ai_timescaledb
    environment:
      POSTGRES_DB: democratic_ai_metrics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5436:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - democratic_ai_network
    command: postgres -c shared_preload_libraries=timescaledb

  # ==================== Object Storage ====================
  minio:
    image: minio/minio:latest
    container_name: democratic_ai_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ==================== Message Queue ====================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: democratic_ai_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - democratic_ai_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==================== Monitoring ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: democratic_ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - democratic_ai_network

  grafana:
    image: grafana/grafana:latest
    container_name: democratic_ai_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - democratic_ai_network
    depends_on:
      - prometheus

  # ==================== API Gateway ====================
  nginx:
    image: nginx:alpine
    container_name: democratic_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - democratic_ai_network
    depends_on:
      - api-gateway

  # ==================== Core Services ====================
  mcp-hub:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.hub
    container_name: democratic_ai_mcp_hub
    environment:
      DB_HOST: postgres-registry
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    ports:
      - "8765:8765"  # WebSocket
      - "50051:50051"  # gRPC
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-registry
      - redis
    restart: unless-stopped

  api-gateway:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.gateway
    container_name: democratic_ai_api_gateway
    environment:
      DB_HOST: postgres-auth
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
      MCP_HUB_URL: ws://mcp-hub:8765
    ports:
      - "8000:8000"
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-auth
      - redis
      - mcp-hub
    restart: unless-stopped

  auth-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.auth
    container_name: democratic_ai_auth_service
    environment:
      DB_HOST: postgres-auth
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-here}
    ports:
      - "8001:8001"
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-auth
      - redis
    restart: unless-stopped

  billing-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.billing
    container_name: democratic_ai_billing_service
    environment:
      DB_HOST: postgres-billing
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      STRIPE_API_KEY: ${STRIPE_API_KEY:-sk_test_...}
    ports:
      - "8002:8002"
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-billing
      - redis
    restart: unless-stopped

  usage-tracker:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.usage
    container_name: democratic_ai_usage_tracker
    environment:
      DB_HOST: postgres-usage
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      TIMESCALE_HOST: timescaledb
    ports:
      - "8003:8003"
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-usage
      - redis
      - timescaledb
    restart: unless-stopped

  registry-service:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.registry
    container_name: democratic_ai_registry_service
    environment:
      DB_HOST: postgres-registry
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "8004:8004"
    networks:
      - democratic_ai_network
    depends_on:
      - postgres-registry
      - redis
      - minio
    restart: unless-stopped

  # ==================== Frontend ====================
  admin-dashboard:
    build:
      context: ../../webapp/admin
      dockerfile: Dockerfile
    container_name: democratic_ai_admin_dashboard
    environment:
      NEXT_PUBLIC_API_URL: http://api-gateway:8000
      NEXT_PUBLIC_WS_URL: ws://mcp-hub:8765
    ports:
      - "3001:3000"
    networks:
      - democratic_ai_network
    depends_on:
      - api-gateway
    restart: unless-stopped

networks:
  democratic_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_auth_data:
  postgres_usage_data:
  postgres_billing_data:
  postgres_registry_data:
  redis_data:
  redis_cluster_data:
  elasticsearch_data:
  timescaledb_data:
  minio_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
